/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
    'api-key': ApiKey;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'api-key': ApiKeySelect<false> | ApiKeySelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero?: HeroField;
  layout: (CallToActionBlock | ContentBlock | MediaBlock | ArchiveBlock | FormBlock | GalleryBlock | FeatureBlock)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroField".
 */
export interface HeroField {
  style?:
    | (
        | 'hero-1'
        | 'hero-5'
        | 'hero-7'
        | 'hero-8'
        | 'hero-12'
        | 'hero-24'
        | 'hero-25'
        | 'hero-32'
        | 'hero-34'
        | 'hero-6'
        | 'hero-3'
        | 'hero-45'
        | 'hero-115'
      )
    | null;
  'hero-1'?: Hero1Fields;
  'hero-5'?: Hero5Fields;
  'hero-7'?: Hero7Fields;
  'hero-8'?: Hero8Fields;
  'hero-12'?: Hero12Fields;
  'hero-24'?: Hero24Fields;
  'hero-25'?: Hero25Fields;
  'hero-32'?: Hero32Fields;
  'hero-34'?: Hero34Fields;
  'hero-6'?: Hero6Fields;
  'hero-3'?: Hero3Fields;
  'hero-45'?: Hero45Fields;
  'hero-115'?: Hero115Fields;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero1Fields".
 */
export interface Hero1Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Badge text displayed above title
     */
    badge?: string | null;
    /**
     * Hero buttons
     */
    links?:
      | {
          'link-1': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          /**
           * Hero button with ArrowDownRight suffix icon
           */
          'link-2': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero5Fields".
 */
export interface Hero5Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Hero button
     */
    links?:
      | {
          /**
           * Hero button with ArrowRight prefix icon
           */
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero7Fields".
 */
export interface Hero7Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Hero button
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
       */
      prefixIcon?: string | null;
      /**
       * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
       */
      suffixIcon?: string | null;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline' | 'ghost') | null;
    };
    /**
     * Rating information
     */
    rating: {
      /**
       * Rating value (0-5)
       */
      rate: number;
      /**
       * Number of ratings
       */
      count: number;
      /**
       * User avatars (3-5)
       */
      avatars?:
        | {
            /**
             * User avatar
             */
            avatar: string | Media;
            id?: string | null;
          }[]
        | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero8Fields".
 */
export interface Hero8Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Hero buttons (exactly 2)
     */
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero12Fields".
 */
export interface Hero12Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Partner logo image
     */
    logo: string | Media;
    /**
     * Badge text displayed above title
     */
    badge?: string | null;
    /**
     * Hero buttons (1-2)
     */
    links?:
      | {
          'link-1': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          /**
           * Hero button with ExternalLink suffix icon
           */
          'link-2': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * Partner logos (1-6)
     */
    partners?:
      | {
          /**
           * Partner logo image
           */
          logo: string | Media;
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero24Fields".
 */
export interface Hero24Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Partner logo image
     */
    logo: string | Media;
    /**
     * Badge text displayed above title
     */
    badge?: string | null;
    /**
     * Hero button
     */
    links?:
      | {
          /**
           * Hero button with MoveRight suffix icon
           */
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * Feature list (exactly 4 items)
     */
    features?:
      | {
          /**
           * Lucide icon name
           */
          icon: string;
          /**
           * Feature title
           */
          title: string;
          /**
           * Feature description
           */
          description: string;
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero25Fields".
 */
export interface Hero25Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Partner logo image
     */
    logo: string | Media;
    /**
     * Badge text displayed above title
     */
    badge?: string | null;
    /**
     * Hero buttons (1-2)
     */
    links?:
      | {
          /**
           * Hero button
           */
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * Feature list (1-4 items)
     */
    features?:
      | {
          /**
           * Lucide icon name
           */
          icon: string;
          /**
           * Feature title
           */
          title: string;
          /**
           * Feature description
           */
          description: string;
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero32Fields".
 */
export interface Hero32Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Hero button
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
       */
      prefixIcon?: string | null;
      /**
       * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
       */
      suffixIcon?: string | null;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline' | 'ghost') | null;
    };
    /**
     * Integration images (exactly 15)
     */
    integrations?:
      | {
          /**
           * Integration logo/image
           */
          image: string | Media;
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero34Fields".
 */
export interface Hero34Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Badge text displayed above title
     */
    badge?: string | null;
    /**
     * Hero buttons
     */
    links?:
      | {
          /**
           * Hero button with ArrowRight prefix icon
           */
          'link-1': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          'link-2': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero6Fields".
 */
export interface Hero6Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Hero buttons (exactly 3)
     */
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * Partner logos (exactly 4)
     */
    partners?:
      | {
          /**
           * Logo image
           */
          logo?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    /**
     * Secondary image with button
     */
    secondaryImage: {
      /**
       * Hero image
       */
      image: string | Media;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero3Fields".
 */
export interface Hero3Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Avatar images (exactly 5)
     */
    avatars?:
      | {
          /**
           * Hero image
           */
          image: string | Media;
          id?: string | null;
        }[]
      | null;
    /**
     * Hero buttons (exactly 2)
     */
    links?:
      | {
          'link-1': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          /**
           * Hero button with ArrowDownRight suffix icon
           */
          'link-2': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
    /**
     * Review section configuration
     */
    review: {
      /**
       * Rating value (0-5)
       */
      rate: number;
      /**
       * Number of ratings
       */
      count: number;
    };
    /**
     * Hero media
     */
    media: {
      /**
       * Hero image
       */
      image: string | Media;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero45Fields".
 */
export interface Hero45Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Badge text displayed above title
     */
    badge?: string | null;
    /**
     * Feature list (exactly 3 items)
     */
    features?:
      | {
          /**
           * Lucide icon name
           */
          icon: string;
          /**
           * Feature title
           */
          title: string;
          /**
           * Feature description
           */
          description: string;
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero115Fields".
 */
export interface Hero115Fields {
  /**
   * Hero section fields
   */
  hero: {
    /**
     * Feature title
     */
    title: string;
    /**
     * Subtitle text
     */
    subtitle?: string | null;
    /**
     * Text showing trust metrics (e.g., "Trusted by X businesses")
     */
    trustText: string;
    /**
     * Hero image
     */
    image: string | Media;
    /**
     * Hero button
     */
    links?:
      | {
          /**
           * Hero button with Zap suffix icon
           */
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
           */
          prefixIcon?: string | null;
          /**
           * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
           */
          suffixIcon?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'ghost') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
           */
          prefixIcon?: string | null;
          /**
           * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
           */
          suffixIcon?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'ghost') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock".
 */
export interface GalleryBlock {
  style?: ('gallery-6' | 'gallery-7') | null;
  'gallery-6'?: Gallery6Fields;
  'gallery-7'?: {};
  id?: string | null;
  blockName?: string | null;
  blockType: 'gallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Gallery6Fields".
 */
export interface Gallery6Fields {
  /**
   * Gallery section fields
   */
  gallery: {
    /**
     * Gallery title
     */
    title: string;
    /**
     * Gallery button
     */
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
       */
      prefixIcon?: string | null;
      /**
       * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
       */
      suffixIcon?: string | null;
      /**
       * Choose how the link should be rendered.
       */
      appearance?: ('default' | 'outline' | 'ghost') | null;
    };
    /**
     * Gallery cards (3-6)
     */
    cards?:
      | {
          /**
           * Card title (max 20 characters)
           */
          title: string;
          /**
           * Card description (max 100 characters)
           */
          excerpt: string;
          /**
           * Card link
           */
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          /**
           * Card image
           */
          image: string | Media;
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock".
 */
export interface FeatureBlock {
  style?: ('feature-1' | 'feature-2') | null;
  'feature-1'?: Feature1Fields;
  'feature-2'?: Feature2Fields;
  id?: string | null;
  blockName?: string | null;
  blockType: 'feature';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Feature1Fields".
 */
export interface Feature1Fields {
  /**
   * Feature section fields
   */
  feature: {
    /**
     * Main heading text
     */
    title: string;
    /**
     * Feature description text
     */
    description: string;
    /**
     * Feature image
     */
    image: string | Media;
    /**
     * Lucide icon name (e.g., MessagesSquare)
     */
    icon: string;
    /**
     * Feature links
     */
    links?:
      | {
          /**
           * Primary link with icon
           */
          'link-1': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          /**
           * Secondary link
           */
          'link-2': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Feature2Fields".
 */
export interface Feature2Fields {
  /**
   * Feature section fields
   */
  feature: {
    /**
     * Main heading text
     */
    title: string;
    /**
     * Feature description text
     */
    description: string;
    /**
     * Feature image
     */
    image: string | Media;
    /**
     * Lucide icon name (e.g., MessagesSquare)
     */
    icon: string;
    /**
     * Feature links
     */
    links?:
      | {
          /**
           * Primary link with icon
           */
          'link-1': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          /**
           * Secondary link
           */
          'link-2': {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
             */
            prefixIcon?: string | null;
            /**
             * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
             */
            suffixIcon?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline' | 'ghost') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?: T | HeroFieldSelect<T>;
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        gallery?: T | GalleryBlockSelect<T>;
        feature?: T | FeatureBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroField_select".
 */
export interface HeroFieldSelect<T extends boolean = true> {
  style?: T;
  'hero-1'?: T | Hero1FieldsSelect<T>;
  'hero-5'?: T | Hero5FieldsSelect<T>;
  'hero-7'?: T | Hero7FieldsSelect<T>;
  'hero-8'?: T | Hero8FieldsSelect<T>;
  'hero-12'?: T | Hero12FieldsSelect<T>;
  'hero-24'?: T | Hero24FieldsSelect<T>;
  'hero-25'?: T | Hero25FieldsSelect<T>;
  'hero-32'?: T | Hero32FieldsSelect<T>;
  'hero-34'?: T | Hero34FieldsSelect<T>;
  'hero-6'?: T | Hero6FieldsSelect<T>;
  'hero-3'?: T | Hero3FieldsSelect<T>;
  'hero-45'?: T | Hero45FieldsSelect<T>;
  'hero-115'?: T | Hero115FieldsSelect<T>;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero1Fields_select".
 */
export interface Hero1FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        image?: T;
        badge?: T;
        links?:
          | T
          | {
              'link-1'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              'link-2'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero5Fields_select".
 */
export interface Hero5FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        image?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero7Fields_select".
 */
export interface Hero7FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
              appearance?: T;
            };
        rating?:
          | T
          | {
              rate?: T;
              count?: T;
              avatars?:
                | T
                | {
                    avatar?: T;
                    id?: T;
                  };
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero8Fields_select".
 */
export interface Hero8FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        image?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero12Fields_select".
 */
export interface Hero12FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        logo?: T;
        badge?: T;
        links?:
          | T
          | {
              'link-1'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              'link-2'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        partners?:
          | T
          | {
              logo?: T;
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero24Fields_select".
 */
export interface Hero24FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        logo?: T;
        badge?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        features?:
          | T
          | {
              icon?: T;
              title?: T;
              description?: T;
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero25Fields_select".
 */
export interface Hero25FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        logo?: T;
        badge?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        features?:
          | T
          | {
              icon?: T;
              title?: T;
              description?: T;
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero32Fields_select".
 */
export interface Hero32FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
              appearance?: T;
            };
        integrations?:
          | T
          | {
              image?: T;
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero34Fields_select".
 */
export interface Hero34FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        image?: T;
        badge?: T;
        links?:
          | T
          | {
              'link-1'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              'link-2'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero6Fields_select".
 */
export interface Hero6FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        image?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        partners?:
          | T
          | {
              logo?: T;
              id?: T;
            };
        secondaryImage?:
          | T
          | {
              image?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero3Fields_select".
 */
export interface Hero3FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        avatars?:
          | T
          | {
              image?: T;
              id?: T;
            };
        links?:
          | T
          | {
              'link-1'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              'link-2'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        review?:
          | T
          | {
              rate?: T;
              count?: T;
            };
        media?:
          | T
          | {
              image?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero45Fields_select".
 */
export interface Hero45FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        image?: T;
        badge?: T;
        features?:
          | T
          | {
              icon?: T;
              title?: T;
              description?: T;
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero115Fields_select".
 */
export interface Hero115FieldsSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        trustText?: T;
        image?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock_select".
 */
export interface GalleryBlockSelect<T extends boolean = true> {
  style?: T;
  'gallery-6'?: T | Gallery6FieldsSelect<T>;
  'gallery-7'?: T | {};
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Gallery6Fields_select".
 */
export interface Gallery6FieldsSelect<T extends boolean = true> {
  gallery?:
    | T
    | {
        title?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
              appearance?: T;
            };
        cards?:
          | T
          | {
              title?: T;
              excerpt?: T;
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              image?: T;
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock_select".
 */
export interface FeatureBlockSelect<T extends boolean = true> {
  style?: T;
  'feature-1'?: T | Feature1FieldsSelect<T>;
  'feature-2'?: T | Feature2FieldsSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Feature1Fields_select".
 */
export interface Feature1FieldsSelect<T extends boolean = true> {
  feature?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        icon?: T;
        links?:
          | T
          | {
              'link-1'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              'link-2'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Feature2Fields_select".
 */
export interface Feature2FieldsSelect<T extends boolean = true> {
  feature?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        icon?: T;
        links?:
          | T
          | {
              'link-1'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              'link-2'?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    prefixIcon?: T;
                    suffixIcon?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
           */
          prefixIcon?: string | null;
          /**
           * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
           */
          suffixIcon?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Optional: Lucide icon name for prefix (e.g., "ArrowLeft")
           */
          prefixIcon?: string | null;
          /**
           * Optional: Lucide icon name for suffix (e.g., "ArrowRight")
           */
          suffixIcon?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "api-key".
 */
export interface ApiKey {
  id: string;
  keys?:
    | {
        /**
         * ⚠️ OpenAI API密钥将以加密形式存储
         */
        openai?: string | null;
        /**
         * ⚠️ DeepSeek API密钥将以加密形式存储
         */
        deepseek?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              prefixIcon?: T;
              suffixIcon?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "api-key_select".
 */
export interface ApiKeySelect<T extends boolean = true> {
  keys?:
    | T
    | {
        openai?: T;
        deepseek?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}